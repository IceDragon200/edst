- render_tag = lambda do |node, node_ctx, d = 0|
  - tag_name = node.key
  - if tag_name.start_with?('&')
    - case tag_name[1...tag_name.length]
    - when /image(?:#(\S+))?/
      - ref = $1 || ''
      - fn = node.value
      - bsn = File.basename(fn)
      - ex = "images/#{bsn}"
      - asset = [fn, ex]
      - asset_exports << asset
      - (node_ctx.refs ||= {})[ref] = asset if ref.present?
      a.image-ref id="#{ref}" href="./#{ex}"
        .image-title
          - if ref.present?
            span = ref
          span.filename.comment = bsn
        .image-content
          img src="./#{ex}"
    - else
      - alert.fixme node.kind, node.key, node.value
      div class="fixme meta #{node.kind}"
        p.comment = "FIXME: #{node.kind} #{tag_name}"
        dl
          dt = node.key
          dd = node.value
  - else
    - tag_id = "tag-#{tag_name.downcase}"
    dl class="tag #{tag_id}"
      dt class="#{tag_id}" = tag_name.titlecase
      dd class="#{tag_id}" = node.value

- render_document = lambda do |tre, node_ctx, d = 0|
  - tre.each_child do |node|
    - case node.kind
    - when :dialogue_group
      .dialogues
        - render_document.call node, node_ctx, d + 1
    - when :dialogue
      .dialogue
        .h.speaker = node.key
        .p.text = node.value
    - when :ln
      li = node.value
    - when :list
      ul
        - render_document.call node, node_ctx, d + 1
    - when :header
      .h = node.value
    - when :label
      .label id="#{node.value.underscore}" = node.value
    - when :split
      hr
    - when :comment
      p.comment = node.value
    - when :tag
      - render_tag.call node, node_ctx, d + 1
    - when :div
      - t = (node.key || '')
      div class="subtree #{t.gsub('.', ' ')}"
        - if node.children.empty?
          .h.disabled = t.titlecase
        - else
          .h = t.titlecase
          .c
            - sub_ctx = OpenStruct.new(parent: node_ctx)
            - render_document.call node, sub_ctx, d + 1
    - when :p
      p = node.value
    - else
      - alert.fixme node.kind, node.key, node.value
      div class="fixme #{node.kind}"
        p.comment = "FIXME: #{node.kind}"
        dl
          dt = node.key
          dd = node.value

- node_ctx = OpenStruct.new
- render_document.call document, node_ctx, 0
